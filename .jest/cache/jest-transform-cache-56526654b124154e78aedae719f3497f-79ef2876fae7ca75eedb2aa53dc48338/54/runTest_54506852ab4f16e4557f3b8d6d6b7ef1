ce2b80632666aad5258436a3c948147e
'use strict';

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = runTest;
function _chalk() {
  var data = _interopRequireDefault(require('chalk'));
  _chalk = function _chalk() {
    return data;
  };
  return data;
}
function fs() {
  var data = _interopRequireWildcard(require('graceful-fs'));
  fs = function fs() {
    return data;
  };
  return data;
}
function _sourceMapSupport() {
  var data = _interopRequireDefault(require('source-map-support'));
  _sourceMapSupport = function _sourceMapSupport() {
    return data;
  };
  return data;
}
function _console() {
  var data = require('@jest/console');
  _console = function _console() {
    return data;
  };
  return data;
}
function _transform() {
  var data = require('@jest/transform');
  _transform = function _transform() {
    return data;
  };
  return data;
}
function docblock() {
  var data = _interopRequireWildcard(require('jest-docblock'));
  docblock = function docblock() {
    return data;
  };
  return data;
}
function _jestLeakDetector() {
  var data = _interopRequireDefault(require('jest-leak-detector'));
  _jestLeakDetector = function _jestLeakDetector() {
    return data;
  };
  return data;
}
function _jestMessageUtil() {
  var data = require('jest-message-util');
  _jestMessageUtil = function _jestMessageUtil() {
    return data;
  };
  return data;
}
function _jestResolve() {
  var data = require('jest-resolve');
  _jestResolve = function _jestResolve() {
    return data;
  };
  return data;
}
function _jestUtil() {
  var data = require('jest-util');
  _jestUtil = function _jestUtil() {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || _typeof(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj["default"] = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

function freezeConsole(testConsole, config) {
  // @ts-expect-error: `_log` is `private` - we should figure out some proper API here
  testConsole._log = function fakeConsolePush(_type, message) {
    var error = new (_jestUtil().ErrorWithStack)("".concat(_chalk()["default"].red("".concat(_chalk()["default"].bold('Cannot log after tests are done.'), " Did you forget to wait for something async in your test?")), "\nAttempted to log \"").concat(message, "\"."), fakeConsolePush);
    var formattedError = (0, _jestMessageUtil().formatExecError)(error, config, {
      noStackTrace: false
    }, undefined, true);
    process.stderr.write("\n".concat(formattedError, "\n"));
    process.exitCode = 1;
  };
}

// Keeping the core of "runTest" as a separate function (as "runTestInternal")
// is key to be able to detect memory leaks. Since all variables are local to
// the function, when "runTestInternal" finishes its execution, they can all be
// freed, UNLESS something else is leaking them (and that's why we can detect
// the leak!).
//
// If we had all the code in a single function, we should manually nullify all
// references to verify if there is a leak, which is not maintainable and error
// prone. That's why "runTestInternal" CANNOT be inlined inside "runTest".
function runTestInternal(_x, _x2, _x3, _x4, _x5, _x6) {
  return _runTestInternal.apply(this, arguments);
}
function _runTestInternal() {
  _runTestInternal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(path, globalConfig, projectConfig, resolver, context, sendMessageToJest) {
    var testSource, docblockPragmas, customEnvironment, testEnvironment, cacheFS, transformer, TestEnvironment, testFramework, Runtime, consoleOut, consoleFormatter, testConsole, extraTestEnvironmentOptions, docblockEnvironmentOptions, environment, leakDetector, runtime, isTornDown, tearDownEnv, start, _iterator, _step, _path, esm, setupFile, sourcemapOptions, realExit, collectV8Coverage, result, testCount, end, testRuntime, coverage, coverageKeys, v8Coverage, _globalThis$gc;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          testSource = fs().readFileSync(path, 'utf8');
          docblockPragmas = docblock().parse(docblock().extract(testSource));
          customEnvironment = docblockPragmas['jest-environment'];
          testEnvironment = projectConfig.testEnvironment;
          if (!customEnvironment) {
            _context2.next = 8;
            break;
          }
          if (!Array.isArray(customEnvironment)) {
            _context2.next = 7;
            break;
          }
          throw new Error("You can only define a single test environment through docblocks, got \"".concat(customEnvironment.join(', '), "\""));
        case 7:
          testEnvironment = (0, _jestResolve().resolveTestEnvironment)(_objectSpread(_objectSpread({}, projectConfig), {}, {
            requireResolveFunction: require.resolve,
            testEnvironment: customEnvironment
          }));
        case 8:
          cacheFS = new Map([[path, testSource]]);
          _context2.next = 11;
          return (0, _transform().createScriptTransformer)(projectConfig, cacheFS);
        case 11:
          transformer = _context2.sent;
          _context2.next = 14;
          return transformer.requireAndTranspileModule(testEnvironment);
        case 14:
          TestEnvironment = _context2.sent;
          _context2.next = 17;
          return transformer.requireAndTranspileModule(process.env.JEST_JASMINE === '1' ? require.resolve('jest-jasmine2') : projectConfig.testRunner);
        case 17:
          testFramework = _context2.sent;
          Runtime = (0, _jestUtil().interopRequireDefault)(projectConfig.runtime ? require(projectConfig.runtime) : require('jest-runtime'))["default"];
          consoleOut = globalConfig.useStderr ? process.stderr : process.stdout;
          consoleFormatter = function consoleFormatter(type, message) {
            return (0, _console().getConsoleOutput)(
            // 4 = the console call is buried 4 stack frames deep
            _console().BufferedConsole.write([], type, message, 4), projectConfig, globalConfig);
          };
          if (globalConfig.silent) {
            testConsole = new (_console().NullConsole)(consoleOut, consoleOut, consoleFormatter);
          } else if (globalConfig.verbose) {
            testConsole = new (_console().CustomConsole)(consoleOut, consoleOut, consoleFormatter);
          } else {
            testConsole = new (_console().BufferedConsole)();
          }
          docblockEnvironmentOptions = docblockPragmas['jest-environment-options'];
          if (typeof docblockEnvironmentOptions === 'string') {
            extraTestEnvironmentOptions = JSON.parse(docblockEnvironmentOptions);
          }
          environment = new TestEnvironment({
            globalConfig: globalConfig,
            projectConfig: extraTestEnvironmentOptions ? _objectSpread(_objectSpread({}, projectConfig), {}, {
              testEnvironmentOptions: _objectSpread(_objectSpread({}, projectConfig.testEnvironmentOptions), extraTestEnvironmentOptions)
            }) : projectConfig
          }, {
            console: testConsole,
            docblockPragmas: docblockPragmas,
            testPath: path
          });
          if (typeof environment.getVmContext !== 'function') {
            console.error("Test environment found at \"".concat(testEnvironment, "\" does not export a \"getVmContext\" method, which is mandatory from Jest 27. This method is a replacement for \"runScript\"."));
            process.exit(1);
          }
          leakDetector = projectConfig.detectLeaks ? new (_jestLeakDetector()["default"])(environment) : null;
          (0, _jestUtil().setGlobal)(environment.global, 'console', testConsole);
          runtime = new Runtime(projectConfig, environment, resolver, transformer, cacheFS, {
            changedFiles: context.changedFiles,
            collectCoverage: globalConfig.collectCoverage,
            collectCoverageFrom: globalConfig.collectCoverageFrom,
            coverageProvider: globalConfig.coverageProvider,
            sourcesRelatedToTestsInChangedFiles: context.sourcesRelatedToTestsInChangedFiles
          }, path, globalConfig);
          isTornDown = false;
          tearDownEnv = /*#__PURE__*/function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
              return _regeneratorRuntime().wrap(function _callee$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    if (isTornDown) {
                      _context.next = 5;
                      break;
                    }
                    runtime.teardown();
                    _context.next = 4;
                    return environment.teardown();
                  case 4:
                    isTornDown = true;
                  case 5:
                  case "end":
                    return _context.stop();
                }
              }, _callee);
            }));
            return function tearDownEnv() {
              return _ref.apply(this, arguments);
            };
          }();
          start = Date.now();
          _iterator = _createForOfIteratorHelper(projectConfig.setupFiles);
          _context2.prev = 33;
          _iterator.s();
        case 35:
          if ((_step = _iterator.n()).done) {
            _context2.next = 49;
            break;
          }
          _path = _step.value;
          esm = runtime.unstable_shouldLoadAsEsm(_path);
          if (!esm) {
            _context2.next = 43;
            break;
          }
          _context2.next = 41;
          return runtime.unstable_importModule(_path);
        case 41:
          _context2.next = 47;
          break;
        case 43:
          setupFile = runtime.requireModule(_path);
          if (!(typeof setupFile === 'function')) {
            _context2.next = 47;
            break;
          }
          _context2.next = 47;
          return setupFile();
        case 47:
          _context2.next = 35;
          break;
        case 49:
          _context2.next = 54;
          break;
        case 51:
          _context2.prev = 51;
          _context2.t0 = _context2["catch"](33);
          _iterator.e(_context2.t0);
        case 54:
          _context2.prev = 54;
          _iterator.f();
          return _context2.finish(54);
        case 57:
          sourcemapOptions = {
            environment: 'node',
            handleUncaughtExceptions: false,
            retrieveSourceMap: function retrieveSourceMap(source) {
              var _runtime$getSourceMap;
              var sourceMapSource = (_runtime$getSourceMap = runtime.getSourceMaps()) === null || _runtime$getSourceMap === void 0 ? void 0 : _runtime$getSourceMap.get(source);
              if (sourceMapSource) {
                try {
                  return {
                    map: JSON.parse(fs().readFileSync(sourceMapSource, 'utf8')),
                    url: source
                  };
                } catch (_unused) {}
              }
              return null;
            }
          }; // For tests
          runtime.requireInternalModule(require.resolve('source-map-support')).install(sourcemapOptions);

          // For runtime errors
          _sourceMapSupport()["default"].install(sourcemapOptions);
          if (environment.global && environment.global.process && environment.global.process.exit) {
            realExit = environment.global.process.exit;
            environment.global.process.exit = function exit() {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              var error = new (_jestUtil().ErrorWithStack)("process.exit called with \"".concat(args.join(', '), "\""), exit);
              var formattedError = (0, _jestMessageUtil().formatExecError)(error, projectConfig, {
                noStackTrace: false
              }, undefined, true);
              process.stderr.write(formattedError);
              return realExit.apply(void 0, args);
            };
          }

          // if we don't have `getVmContext` on the env skip coverage
          collectV8Coverage = globalConfig.collectCoverage && globalConfig.coverageProvider === 'v8' && typeof environment.getVmContext === 'function'; // Node's error-message stack size is limited at 10, but it's pretty useful
          // to see more than that when a test fails.
          Error.stackTraceLimit = 100;
          _context2.prev = 63;
          _context2.next = 66;
          return environment.setup();
        case 66:
          _context2.prev = 66;
          if (!collectV8Coverage) {
            _context2.next = 70;
            break;
          }
          _context2.next = 70;
          return runtime.collectV8Coverage();
        case 70:
          _context2.next = 72;
          return testFramework(globalConfig, projectConfig, environment, runtime, path, sendMessageToJest);
        case 72:
          result = _context2.sent;
          _context2.next = 79;
          break;
        case 75:
          _context2.prev = 75;
          _context2.t1 = _context2["catch"](66);
          // Access stack before uninstalling sourcemaps
          _context2.t1.stack;
          throw _context2.t1;
        case 79:
          _context2.prev = 79;
          if (!collectV8Coverage) {
            _context2.next = 83;
            break;
          }
          _context2.next = 83;
          return runtime.stopCollectingV8Coverage();
        case 83:
          return _context2.finish(79);
        case 84:
          freezeConsole(testConsole, projectConfig);
          testCount = result.numPassingTests + result.numFailingTests + result.numPendingTests + result.numTodoTests;
          end = Date.now();
          testRuntime = end - start;
          result.perfStats = {
            end: end,
            runtime: testRuntime,
            slow: testRuntime / 1000 > projectConfig.slowTestThreshold,
            start: start
          };
          result.testFilePath = path;
          result.console = testConsole.getBuffer();
          result.skipped = testCount === result.numPendingTests;
          result.displayName = projectConfig.displayName;
          coverage = runtime.getAllCoverageInfoCopy();
          if (coverage) {
            coverageKeys = Object.keys(coverage);
            if (coverageKeys.length) {
              result.coverage = coverage;
            }
          }
          if (collectV8Coverage) {
            v8Coverage = runtime.getAllV8CoverageInfoCopy();
            if (v8Coverage && v8Coverage.length > 0) {
              result.v8Coverage = v8Coverage;
            }
          }
          if (globalConfig.logHeapUsage) {
            // @ts-expect-error - doesn't exist on globalThis
            (_globalThis$gc = globalThis.gc) === null || _globalThis$gc === void 0 || _globalThis$gc.call(globalThis);
            result.memoryUsage = process.memoryUsage().heapUsed;
          }
          _context2.next = 99;
          return tearDownEnv();
        case 99:
          _context2.next = 101;
          return new Promise(function (resolve) {
            setImmediate(function () {
              return resolve({
                leakDetector: leakDetector,
                result: result
              });
            });
          });
        case 101:
          return _context2.abrupt("return", _context2.sent);
        case 102:
          _context2.prev = 102;
          _context2.next = 105;
          return tearDownEnv();
        case 105:
          _sourceMapSupport()["default"].resetRetrieveHandlers();
          return _context2.finish(102);
        case 107:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[33, 51, 54, 57], [63,, 102, 107], [66, 75, 79, 84]]);
  }));
  return _runTestInternal.apply(this, arguments);
}
function runTest(_x7, _x8, _x9, _x10, _x11, _x12) {
  return _runTest.apply(this, arguments);
}
function _runTest() {
  _runTest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(path, globalConfig, config, resolver, context, sendMessageToJest) {
    var _yield$runTestInterna, leakDetector, result;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return runTestInternal(path, globalConfig, config, resolver, context, sendMessageToJest);
        case 2:
          _yield$runTestInterna = _context3.sent;
          leakDetector = _yield$runTestInterna.leakDetector;
          result = _yield$runTestInterna.result;
          if (!leakDetector) {
            _context3.next = 13;
            break;
          }
          _context3.next = 8;
          return new Promise(function (resolve) {
            return setTimeout(resolve, 100);
          });
        case 8:
          _context3.next = 10;
          return leakDetector.isLeaking();
        case 10:
          result.leaks = _context3.sent;
          _context3.next = 14;
          break;
        case 13:
          result.leaks = false;
        case 14:
          return _context3.abrupt("return", result);
        case 15:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _runTest.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,