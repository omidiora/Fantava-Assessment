49bd34bb5bde9932faea179a584a3e12
'use strict';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.EmittingTestRunner = exports.CallbackTestRunner = void 0;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var BaseTestRunner = /*#__PURE__*/_createClass(function BaseTestRunner(_globalConfig, _context) {
  _classCallCheck(this, BaseTestRunner);
  _defineProperty(this, "isSerial", void 0);
  this._globalConfig = _globalConfig;
  this._context = _context;
});
var CallbackTestRunner = /*#__PURE__*/function (_BaseTestRunner2) {
  _inherits(CallbackTestRunner, _BaseTestRunner2);
  function CallbackTestRunner() {
    var _this;
    _classCallCheck(this, CallbackTestRunner);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, CallbackTestRunner, [].concat(args));
    _defineProperty(_assertThisInitialized(_this), "supportsEventEmitters", false);
    return _this;
  }
  return _createClass(CallbackTestRunner);
}(BaseTestRunner);
exports.CallbackTestRunner = CallbackTestRunner;
var EmittingTestRunner = /*#__PURE__*/function (_BaseTestRunner3) {
  _inherits(EmittingTestRunner, _BaseTestRunner3);
  function EmittingTestRunner() {
    var _this2;
    _classCallCheck(this, EmittingTestRunner);
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    _this2 = _callSuper(this, EmittingTestRunner, [].concat(args));
    _defineProperty(_assertThisInitialized(_this2), "supportsEventEmitters", true);
    return _this2;
  }
  return _createClass(EmittingTestRunner);
}(BaseTestRunner);
exports.EmittingTestRunner = EmittingTestRunner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfY2FsbFN1cGVyIiwidCIsImUiLCJfZ2V0UHJvdG90eXBlT2YiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiYXBwbHkiLCJzZWxmIiwiY2FsbCIsIlR5cGVFcnJvciIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJCb29sZWFuIiwidmFsdWVPZiIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJiaW5kIiwiX19wcm90b19fIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJ2YWx1ZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZGVmaW5lUHJvcGVydHkiLCJfc2V0UHJvdG90eXBlT2YiLCJwIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsIl90b1Byb3BlcnR5S2V5Iiwia2V5IiwiX2NyZWF0ZUNsYXNzIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsInIiLCJ0b1ByaW1pdGl2ZSIsIk51bWJlciIsImV4cG9ydHMiLCJFbWl0dGluZ1Rlc3RSdW5uZXIiLCJDYWxsYmFja1Rlc3RSdW5uZXIiLCJCYXNlVGVzdFJ1bm5lciIsIl9nbG9iYWxDb25maWciLCJfY29udGV4dCIsIl9CYXNlVGVzdFJ1bm5lcjIiLCJfdGhpcyIsIl9sZW4iLCJhcmd1bWVudHMiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiY29uY2F0IiwiX0Jhc2VUZXN0UnVubmVyMyIsIl90aGlzMiIsIl9sZW4yIiwiX2tleTIiXSwic291cmNlcyI6WyJ0eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5FbWl0dGluZ1Rlc3RSdW5uZXIgPSBleHBvcnRzLkNhbGxiYWNrVGVzdFJ1bm5lciA9IHZvaWQgMDtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5jbGFzcyBCYXNlVGVzdFJ1bm5lciB7XG4gIGlzU2VyaWFsO1xuICBjb25zdHJ1Y3RvcihfZ2xvYmFsQ29uZmlnLCBfY29udGV4dCkge1xuICAgIHRoaXMuX2dsb2JhbENvbmZpZyA9IF9nbG9iYWxDb25maWc7XG4gICAgdGhpcy5fY29udGV4dCA9IF9jb250ZXh0O1xuICB9XG59XG5jbGFzcyBDYWxsYmFja1Rlc3RSdW5uZXIgZXh0ZW5kcyBCYXNlVGVzdFJ1bm5lciB7XG4gIHN1cHBvcnRzRXZlbnRFbWl0dGVycyA9IGZhbHNlO1xufVxuZXhwb3J0cy5DYWxsYmFja1Rlc3RSdW5uZXIgPSBDYWxsYmFja1Rlc3RSdW5uZXI7XG5jbGFzcyBFbWl0dGluZ1Rlc3RSdW5uZXIgZXh0ZW5kcyBCYXNlVGVzdFJ1bm5lciB7XG4gIHN1cHBvcnRzRXZlbnRFbWl0dGVycyA9IHRydWU7XG59XG5leHBvcnRzLkVtaXR0aW5nVGVzdFJ1bm5lciA9IEVtaXR0aW5nVGVzdFJ1bm5lcjtcbiJdLCJtYXBwaW5ncyI6IkFBQUEs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