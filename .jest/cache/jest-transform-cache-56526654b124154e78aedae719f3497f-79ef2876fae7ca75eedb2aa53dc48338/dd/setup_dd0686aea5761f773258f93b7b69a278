5e0e77290c9f3e56a5a15ec42c06a1f1
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 */

'use strict';

_getJestObj().mock('../Libraries/Core/InitializeCore', function () {}).mock('../Libraries/Core/NativeExceptionsManager').mock('../Libraries/ReactNative/UIManager', function () {
  return {
    AndroidViewPager: {
      Commands: {
        setPage: jest.fn(),
        setPageWithoutAnimation: jest.fn()
      }
    },
    blur: jest.fn(),
    createView: jest.fn(),
    customBubblingEventTypes: {},
    customDirectEventTypes: {},
    dispatchViewManagerCommand: jest.fn(),
    focus: jest.fn(),
    getViewManagerConfig: jest.fn(function (name) {
      if (name === 'AndroidDrawerLayout') {
        return {
          Constants: {
            DrawerPosition: {
              Left: 10
            }
          }
        };
      }
    }),
    hasViewManagerConfig: jest.fn(function (name) {
      return name === 'AndroidDrawerLayout';
    }),
    measure: jest.fn(),
    manageChildren: jest.fn(),
    removeSubviewsFromContainerWithID: jest.fn(),
    replaceExistingNonRootView: jest.fn(),
    setChildren: jest.fn(),
    updateView: jest.fn(),
    AndroidDrawerLayout: {
      Constants: {
        DrawerPosition: {
          Left: 10
        }
      }
    },
    AndroidTextInput: {
      Commands: {}
    },
    ScrollView: {
      Constants: {}
    },
    View: {
      Constants: {}
    }
  };
}).mock('../Libraries/Image/Image', function () {
  var Image = mockComponent('../Libraries/Image/Image');
  Image.getSize = jest.fn();
  Image.getSizeWithHeaders = jest.fn();
  Image.prefetch = jest.fn();
  Image.prefetchWithMetadata = jest.fn();
  Image.queryCache = jest.fn();
  Image.resolveAssetSource = jest.fn();
  return Image;
}).mock('../Libraries/Text/Text', function () {
  return mockComponent('../Libraries/Text/Text', MockNativeMethods);
}).mock('../Libraries/Components/TextInput/TextInput', function () {
  return mockComponent('../Libraries/Components/TextInput/TextInput', _objectSpread(_objectSpread({}, MockNativeMethods), {}, {
    isFocused: jest.fn(),
    clear: jest.fn(),
    getNativeRef: jest.fn()
  }));
}).mock('../Libraries/Modal/Modal', function () {
  var baseComponent = mockComponent('../Libraries/Modal/Modal');
  var mockModal = jest.requireActual('./mockModal');
  return mockModal(baseComponent);
}).mock('../Libraries/Components/View/View', function () {
  return mockComponent('../Libraries/Components/View/View', MockNativeMethods);
}).mock('../Libraries/Components/AccessibilityInfo/AccessibilityInfo', function () {
  return {
    __esModule: true,
    "default": {
      addEventListener: jest.fn(),
      announceForAccessibility: jest.fn(),
      isAccessibilityServiceEnabled: jest.fn(),
      isBoldTextEnabled: jest.fn(),
      isGrayscaleEnabled: jest.fn(),
      isInvertColorsEnabled: jest.fn(),
      isReduceMotionEnabled: jest.fn(),
      prefersCrossFadeTransitions: jest.fn(),
      isReduceTransparencyEnabled: jest.fn(),
      isScreenReaderEnabled: jest.fn(function () {
        return Promise.resolve(false);
      }),
      setAccessibilityFocus: jest.fn(),
      sendAccessibilityEvent: jest.fn(),
      getRecommendedTimeoutMillis: jest.fn()
    }
  };
}).mock('../Libraries/Components/Clipboard/Clipboard', function () {
  return {
    getString: jest.fn(function () {
      return '';
    }),
    setString: jest.fn()
  };
}).mock('../Libraries/Components/RefreshControl/RefreshControl', function () {
  return jest.requireActual('../Libraries/Components/RefreshControl/__mocks__/RefreshControlMock');
}).mock('../Libraries/Components/ScrollView/ScrollView', function () {
  var baseComponent = mockComponent('../Libraries/Components/ScrollView/ScrollView', _objectSpread(_objectSpread({}, MockNativeMethods), {}, {
    getScrollResponder: jest.fn(),
    getScrollableNode: jest.fn(),
    getInnerViewNode: jest.fn(),
    getInnerViewRef: jest.fn(),
    getNativeScrollRef: jest.fn(),
    scrollTo: jest.fn(),
    scrollToEnd: jest.fn(),
    flashScrollIndicators: jest.fn(),
    scrollResponderZoomTo: jest.fn(),
    scrollResponderScrollNativeHandleToKeyboard: jest.fn()
  }));
  var mockScrollView = jest.requireActual('./mockScrollView');
  return mockScrollView(baseComponent);
}).mock('../Libraries/Components/ActivityIndicator/ActivityIndicator', function () {
  return {
    __esModule: true,
    "default": mockComponent('../Libraries/Components/ActivityIndicator/ActivityIndicator', null, true)
  };
}).mock('../Libraries/AppState/AppState', function () {
  return {
    addEventListener: jest.fn(function () {
      return {
        remove: jest.fn()
      };
    }),
    removeEventListener: jest.fn(),
    currentState: jest.fn()
  };
}).mock('../Libraries/Linking/Linking', function () {
  return {
    openURL: jest.fn(),
    canOpenURL: jest.fn(function () {
      return Promise.resolve(true);
    }),
    openSettings: jest.fn(),
    addEventListener: jest.fn(),
    getInitialURL: jest.fn(function () {
      return Promise.resolve();
    }),
    sendIntent: jest.fn()
  };
})
// Mock modules defined by the native layer (ex: Objective-C, Java)
.mock('../Libraries/BatchedBridge/NativeModules', function () {
  return {
    AlertManager: {
      alertWithArgs: jest.fn()
    },
    AsyncLocalStorage: {
      multiGet: jest.fn(function (keys, callback) {
        return process.nextTick(function () {
          return callback(null, []);
        });
      }),
      multiSet: jest.fn(function (entries, callback) {
        return process.nextTick(function () {
          return callback(null);
        });
      }),
      multiRemove: jest.fn(function (keys, callback) {
        return process.nextTick(function () {
          return callback(null);
        });
      }),
      multiMerge: jest.fn(function (entries, callback) {
        return process.nextTick(function () {
          return callback(null);
        });
      }),
      clear: jest.fn(function (callback) {
        return process.nextTick(function () {
          return callback(null);
        });
      }),
      getAllKeys: jest.fn(function (callback) {
        return process.nextTick(function () {
          return callback(null, []);
        });
      })
    },
    DeviceInfo: {
      getConstants: function getConstants() {
        return {
          Dimensions: {
            window: {
              fontScale: 2,
              height: 1334,
              scale: 2,
              width: 750
            },
            screen: {
              fontScale: 2,
              height: 1334,
              scale: 2,
              width: 750
            }
          }
        };
      }
    },
    DevSettings: {
      addMenuItem: jest.fn(),
      reload: jest.fn()
    },
    ImageLoader: {
      getSize: jest.fn(function (url) {
        return Promise.resolve([320, 240]);
      }),
      prefetchImage: jest.fn()
    },
    ImageViewManager: {
      getSize: jest.fn(function (uri, success) {
        return process.nextTick(function () {
          return success(320, 240);
        });
      }),
      prefetchImage: jest.fn()
    },
    KeyboardObserver: {
      addListener: jest.fn(),
      removeListeners: jest.fn()
    },
    Networking: {
      sendRequest: jest.fn(),
      abortRequest: jest.fn(),
      addListener: jest.fn(),
      removeListeners: jest.fn()
    },
    PlatformConstants: {
      getConstants: function getConstants() {
        return {};
      }
    },
    PushNotificationManager: {
      presentLocalNotification: jest.fn(),
      scheduleLocalNotification: jest.fn(),
      cancelAllLocalNotifications: jest.fn(),
      removeAllDeliveredNotifications: jest.fn(),
      getDeliveredNotifications: jest.fn(function (callback) {
        return process.nextTick(function () {
          return [];
        });
      }),
      removeDeliveredNotifications: jest.fn(),
      setApplicationIconBadgeNumber: jest.fn(),
      getApplicationIconBadgeNumber: jest.fn(function (callback) {
        return process.nextTick(function () {
          return callback(0);
        });
      }),
      cancelLocalNotifications: jest.fn(),
      getScheduledLocalNotifications: jest.fn(function (callback) {
        return process.nextTick(function () {
          return callback();
        });
      }),
      requestPermissions: jest.fn(function () {
        return Promise.resolve({
          alert: true,
          badge: true,
          sound: true
        });
      }),
      abandonPermissions: jest.fn(),
      checkPermissions: jest.fn(function (callback) {
        return process.nextTick(function () {
          return callback({
            alert: true,
            badge: true,
            sound: true
          });
        });
      }),
      getInitialNotification: jest.fn(function () {
        return Promise.resolve(null);
      }),
      addListener: jest.fn(),
      removeListeners: jest.fn()
    },
    SourceCode: {
      getConstants: function getConstants() {
        return {
          scriptURL: null
        };
      }
    },
    StatusBarManager: {
      setColor: jest.fn(),
      setStyle: jest.fn(),
      setHidden: jest.fn(),
      setNetworkActivityIndicatorVisible: jest.fn(),
      setBackgroundColor: jest.fn(),
      setTranslucent: jest.fn(),
      getConstants: function getConstants() {
        return {
          HEIGHT: 42
        };
      }
    },
    Timing: {
      createTimer: jest.fn(),
      deleteTimer: jest.fn()
    },
    UIManager: {},
    BlobModule: {
      getConstants: function getConstants() {
        return {
          BLOB_URI_SCHEME: 'content',
          BLOB_URI_HOST: null
        };
      },
      addNetworkingHandler: jest.fn(),
      enableBlobSupport: jest.fn(),
      disableBlobSupport: jest.fn(),
      createFromParts: jest.fn(),
      sendBlob: jest.fn(),
      release: jest.fn()
    },
    WebSocketModule: {
      connect: jest.fn(),
      send: jest.fn(),
      sendBinary: jest.fn(),
      ping: jest.fn(),
      close: jest.fn(),
      addListener: jest.fn(),
      removeListeners: jest.fn()
    },
    I18nManager: {
      allowRTL: jest.fn(),
      forceRTL: jest.fn(),
      swapLeftAndRightInRTL: jest.fn(),
      getConstants: function getConstants() {
        return {
          isRTL: false,
          doLeftAndRightSwapInRTL: true
        };
      }
    }
  };
}).mock('../Libraries/NativeComponent/NativeComponentRegistry', function () {
  return {
    get: jest.fn(function (name, viewConfigProvider) {
      return jest.requireActual('./mockNativeComponent')["default"](name);
    }),
    getWithFallback_DEPRECATED: jest.fn(function (name, viewConfigProvider) {
      return jest.requireActual('./mockNativeComponent')["default"](name);
    }),
    setRuntimeConfigProvider: jest.fn()
  };
}).mock('../Libraries/ReactNative/requireNativeComponent', function () {
  return jest.requireActual('./mockNativeComponent');
}).mock('../Libraries/Utilities/verifyComponentAttributeEquivalence', function () {
  return function () {};
}).mock('../Libraries/Vibration/Vibration', function () {
  return {
    vibrate: jest.fn(),
    cancel: jest.fn()
  };
}).mock('../Libraries/Components/View/ViewNativeComponent', function () {
  var React = require('react');
  var Component = /*#__PURE__*/function (_React$Component) {
    _inherits(Component, _React$Component);
    function Component() {
      _classCallCheck(this, Component);
      return _callSuper(this, Component, arguments);
    }
    _createClass(Component, [{
      key: "render",
      value: function render() {
        return React.createElement('View', this.props, this.props.children);
      }
    }]);
    return Component;
  }(React.Component);
  Component.displayName = 'View';
  return {
    __esModule: true,
    "default": Component
  };
})
// In tests, we can use the default version instead of the one using
// dependency injection.
.mock('../Libraries/ReactNative/RendererProxy', function () {
  return jest.requireActual('../Libraries/ReactNative/RendererImplementation');
});
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var MockNativeMethods = jest.requireActual('./MockNativeMethods');
var mockComponent = jest.requireActual('./mockComponent');
jest.requireActual('@react-native/js-polyfills/Object.es8');
jest.requireActual('@react-native/js-polyfills/error-guard');
Object.defineProperties(global, {
  __DEV__: {
    configurable: true,
    enumerable: true,
    value: true,
    writable: true
  },
  cancelAnimationFrame: {
    configurable: true,
    enumerable: true,
    value: function value(id) {
      return clearTimeout(id);
    },
    writable: true
  },
  performance: {
    configurable: true,
    enumerable: true,
    value: {
      now: jest.fn(Date.now)
    },
    writable: true
  },
  regeneratorRuntime: {
    configurable: true,
    enumerable: true,
    value: jest.requireActual('regenerator-runtime/runtime'),
    writable: true
  },
  requestAnimationFrame: {
    configurable: true,
    enumerable: true,
    value: function value(callback) {
      return setTimeout(function () {
        return callback(jest.now());
      }, 0);
    },
    writable: true
  },
  window: {
    configurable: true,
    enumerable: true,
    value: global,
    writable: true
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,